package bit_test;

/**
 * Description:
 * <p>
 * Author: zhuanghuang
 * Date: 2019-04-02
 */
public class BitTest {

    public static void main(String[] args) {


        /**
         * Description:int 4个byte，1个byte8bit，java中1个int 4个byte，即32位
         * 5表示为
         * 0000 0000 0000 0000， 0000 0000 0000 0101
         * 左移，5 << 2,*****低位补0
         * 0000 0000 0000 0000， 0000 0000 0001 0100 =20
         *
         */
        System.out.println(5 << 2);


        /**
         * Description:
         * 右移( >> ) ，右移同理
         *
         *
         *         还是先将5转为2进制表示形式：
         *         0000 0000 0000 0000 0000 0000 0000 0101 然后右移2位，******高位补0：
         *
         *         0000 0000 0000 0000 0000 0000 0000 0001
         */
        System.out.println(5 >> 2);//运行结果是1


        /**
         * Description:
         *  Java中int类型占32位，可以表示一个正数，也可以表示一个负数。正数换算成二进制后的最高位为0，负数的二进制最高为为1
         *
         *  例如  -5换算成二进制后为：(负数补码形式，反码+1)
         *
         * 1111 1111 1111 1111 1111 1111 1111 1011
         *
         * 正数右移，高位用0补，负数右移，高位用1补，当负数使用无符号右移时，用0进行部位(自然而然的，就由负数变成了正数了
         *
         */
        System.out.println(5 >> 3);//结果是0，右移，*******高位补0

        //结果是-1，-5右移3位后结果为-1，-1的二进制为： 1111 1111 1111 1111 1111 1111 1111 1111   // (有符号 ******高位用1进行补位)
        System.out.println(-5 >> 3);

        //-5无符号右移3位后的结果 536870911 换算成二进制： 0001 1111 1111 1111 1111 1111 1111 1111   // (无符号 *******高位用0进行补位)
        System.out.println(-5 >>> 3);//结果是536870911

        /**
         * Description:左移，*****低位补0
         */

        //0000 0000 0000 0000， 0000 0000 0010 1000
        System.out.println(5 << 3);

        //5 0000 0000 0000 0000， 0000 0000 0000 0101
        //-5 1000 0000 0000 0000， 0000 0000 0000 0101
        //反码 1111 1111 1111 1111， 1111 1111 1111 1010
        //补码 1111 1111 1111 1111， 1111 1111 1111 1011
        // << 3 1111 1111 1111 1111， 1111 1111 1101 1000
        //-1 1111 1111 1111 1111， 1111 1111 1101 0111
        //反 1000 0000 0000 0000， 0000 0000 0010 1000 =-40
        //左移，******低位补0
        System.out.println(-5 << 3);

        System.out.println(5 ^ 4);//101 100 = 001 异或
        System.out.println(5 | 4);//或 5
        System.out.println(5 & 4);//与 4


    }
}
